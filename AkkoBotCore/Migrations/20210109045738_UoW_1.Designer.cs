// <auto-generated />
using System;
using AkkoBot.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AkkoBot.Migrations
{
    [DbContext(typeof(AkkoDbContext))]
    [Migration("20210109045738_UoW_1")]
    partial class UoW_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("AkkoBot.Services.Database.Entities.BlacklistEntity", b =>
                {
                    b.Property<decimal>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("TypeId")
                        .HasName("pk_blacklist");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_blacklist_type_id");

                    b.ToTable("blacklist");

                    b
                        .HasComment("Stores users, channels, and servers blacklisted from the bot.");
                });

            modelBuilder.Entity("AkkoBot.Services.Database.Entities.BotConfigEntity", b =>
                {
                    b.Property<bool>("CaseSensitiveCommands")
                        .HasColumnType("boolean")
                        .HasColumnName("case_sensitive_commands");

                    b.Property<string>("DefaultPrefix")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("default_prefix");

                    b.Property<string>("LogFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("log_format");

                    b.Property<string>("LogTimeFormat")
                        .HasColumnType("varchar")
                        .HasColumnName("log_time_format");

                    b.Property<int>("MessageSizeCache")
                        .HasColumnType("integer")
                        .HasColumnName("message_size_cache");

                    b.Property<bool>("RespondToDms")
                        .HasColumnType("boolean")
                        .HasColumnName("respond_to_dms");

                    b.ToTable("bot_config");

                    b
                        .HasComment("Stores settings related to the bot.");
                });

            modelBuilder.Entity("AkkoBot.Services.Database.Entities.DiscordUserEntity", b =>
                {
                    b.Property<decimal>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("discriminator");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("pk_discord_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_discord_users_user_id");

                    b.ToTable("discord_users");

                    b
                        .HasComment("Stores data and settings related to individual Discord users.");
                });

            modelBuilder.Entity("AkkoBot.Services.Database.Entities.GuildConfigEntity", b =>
                {
                    b.Property<decimal>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<string>("ErrorColor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("error_color");

                    b.Property<string>("OkColor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("ok_color");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("prefix");

                    b.Property<bool>("UseEmbed")
                        .HasColumnType("boolean")
                        .HasColumnName("use_embed");

                    b.HasKey("GuildId")
                        .HasName("pk_guild_configs");

                    b.HasIndex("GuildId")
                        .HasDatabaseName("ix_guild_configs_guild_id");

                    b.ToTable("guild_configs");

                    b
                        .HasComment("Stores settings related to individual Discord servers.");
                });

            modelBuilder.Entity("AkkoBot.Services.Database.Entities.PlayingStatusEntity", b =>
                {
                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<TimeSpan>("RotationTime")
                        .HasColumnType("interval")
                        .HasColumnName("rotation_time");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.ToTable("playing_statuses");

                    b
                        .HasComment("Stores data related to the bot's Discord status.");
                });
#pragma warning restore 612, 618
        }
    }
}
