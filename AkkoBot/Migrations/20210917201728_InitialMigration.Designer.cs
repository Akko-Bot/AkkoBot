// <auto-generated />
using System;
using System.Collections.Generic;
using AkkoCore.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AkkoBot.Migrations
{
    [DbContext(typeof(AkkoDbContext))]
    [Migration("20210917201728_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.AliasEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("alias");

                    b.Property<string>("Arguments")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("arguments");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("command");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal?>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<bool>("IsDynamic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_dynamic");

                    b.HasKey("Id")
                        .HasName("pk_aliases");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_aliases_guild_id_fk");

                    b.ToTable("aliases");

                    b
                        .HasComment("Stores command aliases.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.AutoCommandEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("author_id");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<string>("CommandString")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("command_string");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<int?>("TimerIdFK")
                        .HasColumnType("integer")
                        .HasColumnName("timer_id_fk");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_auto_commands");

                    b.HasIndex("TimerIdFK")
                        .IsUnique()
                        .HasDatabaseName("ix_auto_commands_timer_id_fk");

                    b.ToTable("auto_commands");

                    b
                        .HasComment("Stores command data and the context it should be automatically sent to.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.AutoSlowmodeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<List<long>>("IgnoredIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("ignored_ids");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("MessageAmount")
                        .HasColumnType("integer")
                        .HasColumnName("message_amount");

                    b.Property<TimeSpan>("SlowmodeDuration")
                        .HasColumnType("interval")
                        .HasColumnName("slowmode_duration");

                    b.Property<TimeSpan>("SlowmodeInterval")
                        .HasColumnType("interval")
                        .HasColumnName("slowmode_interval");

                    b.Property<TimeSpan>("SlowmodeTriggerTime")
                        .HasColumnType("interval")
                        .HasColumnName("slowmode_trigger_time");

                    b.HasKey("Id")
                        .HasName("pk_auto_slowmode");

                    b.HasIndex("GuildIdFK")
                        .IsUnique()
                        .HasDatabaseName("ix_auto_slowmode_guild_id_fk");

                    b.ToTable("auto_slowmode");

                    b
                        .HasComment("Stores the settings for the automatic slow mode of a Discord server.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.BlacklistEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("ContextId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("context_id");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<string>("Name")
                        .HasMaxLength(37)
                        .HasColumnType("character varying(37)")
                        .HasColumnName("name");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("reason");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_blacklist");

                    b.HasAlternateKey("ContextId")
                        .HasName("ak_blacklist_context_id");

                    b.ToTable("blacklist");

                    b
                        .HasComment("Stores users, channels, and servers blacklisted from the bot.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.CommandCooldownEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("command");

                    b.Property<TimeSpan>("Cooldown")
                        .HasColumnType("interval")
                        .HasColumnName("cooldown");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal?>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.HasKey("Id")
                        .HasName("pk_command_cooldown");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_command_cooldown_guild_id_fk");

                    b.ToTable("command_cooldown");

                    b
                        .HasComment("Stores commands whose execution is restricted by a cooldown.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.DiscordUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("discriminator");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_discord_users");

                    b.HasAlternateKey("UserId")
                        .HasName("ak_discord_users_user_id");

                    b.ToTable("discord_users");

                    b
                        .HasComment("Stores data related to individual Discord users.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.FilteredContentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<int>("ContentType")
                        .HasColumnType("integer")
                        .HasColumnName("content_type");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.HasKey("Id")
                        .HasName("pk_filtered_content");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_filtered_content_guild_id_fk");

                    b.ToTable("filtered_content");

                    b
                        .HasComment("Stores the content filters to be applied to a Discord channel.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.FilteredWordsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Behavior")
                        .HasColumnType("integer")
                        .HasColumnName("behavior");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<List<long>>("IgnoredIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("ignored_ids");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("NotificationMessage")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("notification_message");

                    b.Property<List<string>>("Words")
                        .HasColumnType("text[]")
                        .HasColumnName("words");

                    b.HasKey("Id")
                        .HasName("pk_filtered_words");

                    b.HasIndex("GuildIdFK")
                        .IsUnique()
                        .HasDatabaseName("ix_filtered_words_guild_id_fk");

                    b.ToTable("filtered_words");

                    b
                        .HasComment("Stores filtered words of a Discord server.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.GatekeepEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AntiAlt")
                        .HasColumnType("boolean")
                        .HasColumnName("anti_alt");

                    b.Property<int>("AntiAltPunishType")
                        .HasColumnType("integer")
                        .HasColumnName("anti_alt_punish_type");

                    b.Property<decimal?>("AntiAltRoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("anti_alt_role_id");

                    b.Property<TimeSpan>("AntiAltTime")
                        .HasColumnType("interval")
                        .HasColumnName("anti_alt_time");

                    b.Property<string>("CustomSanitizedName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("custom_sanitized_name");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal?>("FarewellChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("farewell_channel_id");

                    b.Property<TimeSpan>("FarewellDeleteTime")
                        .HasColumnType("interval")
                        .HasColumnName("farewell_delete_time");

                    b.Property<string>("FarewellMessage")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("farewell_message");

                    b.Property<decimal?>("GreetChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("greet_channel_id");

                    b.Property<TimeSpan>("GreetDeleteTime")
                        .HasColumnType("interval")
                        .HasColumnName("greet_delete_time");

                    b.Property<bool>("GreetDm")
                        .HasColumnType("boolean")
                        .HasColumnName("greet_dm");

                    b.Property<string>("GreetMessage")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("greet_message");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<bool>("SanitizeNames")
                        .HasColumnType("boolean")
                        .HasColumnName("sanitize_names");

                    b.HasKey("Id")
                        .HasName("pk_gatekeeping");

                    b.HasIndex("GuildIdFK")
                        .IsUnique()
                        .HasDatabaseName("ix_gatekeeping_guild_id_fk");

                    b.ToTable("gatekeeping");

                    b
                        .HasComment("Stores settings and data related to gatekeeping.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.GuildConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BanTemplate")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("ban_template");

                    b.Property<int>("Behavior")
                        .HasColumnType("integer")
                        .HasColumnName("behavior");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<List<long>>("DelCmdBlacklist")
                        .HasColumnType("bigint[]")
                        .HasColumnName("del_cmd_blacklist");

                    b.Property<string>("ErrorColor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("error_color");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<List<long>>("GuildLogBlacklist")
                        .HasColumnType("bigint[]")
                        .HasColumnName("guild_log_blacklist");

                    b.Property<TimeSpan?>("InteractiveTimeout")
                        .HasColumnType("interval")
                        .HasColumnName("interactive_timeout");

                    b.Property<List<long>>("JoinRoles")
                        .HasColumnType("bigint[]")
                        .HasColumnName("join_roles");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("locale");

                    b.Property<long>("MinimumTagPermissions")
                        .HasColumnType("bigint")
                        .HasColumnName("minimum_tag_permissions");

                    b.Property<decimal?>("MuteRoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("mute_role_id");

                    b.Property<string>("OkColor")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("ok_color");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("prefix");

                    b.Property<string>("Timezone")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("timezone");

                    b.Property<TimeSpan>("WarnExpire")
                        .HasColumnType("interval")
                        .HasColumnName("warn_expire");

                    b.HasKey("Id")
                        .HasName("pk_guild_config");

                    b.HasAlternateKey("GuildId")
                        .HasName("ak_guild_config_guild_id");

                    b.ToTable("guild_config");

                    b
                        .HasComment("Stores settings and data related to a Discord server.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.GuildLogEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<decimal>("WebhookId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("webhook_id");

                    b.HasKey("Id")
                        .HasName("pk_guild_logs");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_guild_logs_guild_id_fk");

                    b.ToTable("guild_logs");

                    b
                        .HasComment("Stores information about a guild log.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.MutedUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<string>("JustATest")
                        .HasColumnType("text")
                        .HasColumnName("just_a_test");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_muted_users");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_muted_users_guild_id_fk");

                    b.ToTable("muted_users");

                    b
                        .HasComment("Stores data about users that got muted in a specific server.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.OccurrenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Bans")
                        .HasColumnType("integer")
                        .HasColumnName("bans");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<int>("Kicks")
                        .HasColumnType("integer")
                        .HasColumnName("kicks");

                    b.Property<int>("Mutes")
                        .HasColumnType("integer")
                        .HasColumnName("mutes");

                    b.Property<int>("Notices")
                        .HasColumnType("integer")
                        .HasColumnName("notices");

                    b.Property<int>("Softbans")
                        .HasColumnType("integer")
                        .HasColumnName("softbans");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id");

                    b.Property<int>("Warnings")
                        .HasColumnType("integer")
                        .HasColumnName("warnings");

                    b.HasKey("Id")
                        .HasName("pk_occurrences");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_occurrences_guild_id_fk");

                    b.ToTable("occurrences");

                    b
                        .HasComment("Stores the amount of infractions commited by a user in a server.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.PermissionOverrideEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<List<long>>("AllowedChannelIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("allowed_channel_ids");

                    b.Property<List<long>>("AllowedRoleIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("allowed_role_ids");

                    b.Property<List<long>>("AllowedUserIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("allowed_user_ids");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("command");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal?>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<long>("Permissions")
                        .HasColumnType("bigint")
                        .HasColumnName("permissions");

                    b.HasKey("Id")
                        .HasName("pk_permission_override");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_permission_override_guild_id_fk");

                    b.ToTable("permission_override");

                    b
                        .HasComment("Stores data related to permission overrides for commands.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.PlayingStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("message");

                    b.Property<TimeSpan>("RotationTime")
                        .HasColumnType("interval")
                        .HasColumnName("rotation_time");

                    b.Property<string>("StreamUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("stream_url");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_playing_statuses");

                    b.ToTable("playing_statuses");

                    b
                        .HasComment("Stores data related to the bot's Discord status.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.PollEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string[]>("Answers")
                        .HasColumnType("text[]")
                        .HasColumnName("answers");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("message_id");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("question");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<List<long>>("Voters")
                        .HasColumnType("bigint[]")
                        .HasColumnName("voters");

                    b.Property<int[]>("Votes")
                        .HasColumnType("integer[]")
                        .HasColumnName("votes");

                    b.HasKey("Id")
                        .HasName("pk_polls");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_polls_guild_id_fk");

                    b.ToTable("polls");

                    b
                        .HasComment("Stores data related to a server poll.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.ReminderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("author_id");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTimeOffset>("ElapseAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("elapse_at");

                    b.Property<decimal?>("GuildId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<int>("TimerIdFK")
                        .HasColumnType("integer")
                        .HasColumnName("timer_id_fk");

                    b.HasKey("Id")
                        .HasName("pk_reminders");

                    b.HasIndex("TimerIdFK")
                        .IsUnique()
                        .HasDatabaseName("ix_reminders_timer_id_fk");

                    b.ToTable("reminders");

                    b
                        .HasComment("Stores reminder data and the context it should be sent to.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.RepeaterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("author_id");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("interval")
                        .HasColumnName("interval");

                    b.Property<int>("TimerIdFK")
                        .HasColumnType("integer")
                        .HasColumnName("timer_id_fk");

                    b.HasKey("Id")
                        .HasName("pk_repeaters");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_repeaters_guild_id_fk");

                    b.HasIndex("TimerIdFK")
                        .IsUnique()
                        .HasDatabaseName("ix_repeaters_timer_id_fk");

                    b.ToTable("repeaters");

                    b
                        .HasComment("Stores repeater data and the context it should be sent to.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AllowedPerms")
                        .HasColumnType("bigint")
                        .HasColumnName("allowed_perms");

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("author_id");

                    b.Property<int>("Behavior")
                        .HasColumnType("integer")
                        .HasColumnName("behavior");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal?>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<List<long>>("IgnoredIds")
                        .HasColumnType("bigint[]")
                        .HasColumnName("ignored_ids");

                    b.Property<bool>("IsEmoji")
                        .HasColumnType("boolean")
                        .HasColumnName("is_emoji");

                    b.Property<DateTimeOffset>("LastDayUsed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_day_used");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("response");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("trigger");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_tags_guild_id_fk");

                    b.ToTable("tags");

                    b
                        .HasComment("Stores data related to a tag.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.TimerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<DateTimeOffset>("ElapseAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("elapse_at");

                    b.Property<decimal?>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("interval")
                        .HasColumnName("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_repeatable");

                    b.Property<decimal?>("RoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("role_id");

                    b.Property<TimeSpan?>("TimeOfDay")
                        .HasColumnType("interval")
                        .HasColumnName("time_of_day");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<decimal>("UserIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id_fk");

                    b.HasKey("Id")
                        .HasName("pk_timers");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_timers_guild_id_fk");

                    b.HasIndex("UserIdFK")
                        .HasDatabaseName("ix_timers_user_id_fk");

                    b.ToTable("timers");

                    b
                        .HasComment("Stores a timer that executes actions at some point in the future.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.VoiceRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFk")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_voice_roles");

                    b.HasIndex("GuildIdFk")
                        .HasDatabaseName("ix_voice_roles_guild_id_fk");

                    b.ToTable("voice_roles");

                    b
                        .HasComment("Stores a voice chat role.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.WarnEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("author_id");

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<int?>("TimerIdFK")
                        .HasColumnType("integer")
                        .HasColumnName("timer_id_fk");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<decimal>("UserIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("user_id_fk");

                    b.Property<string>("WarningText")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("warning_text");

                    b.HasKey("Id")
                        .HasName("pk_warnings");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_warnings_guild_id_fk");

                    b.HasIndex("TimerIdFK")
                        .IsUnique()
                        .HasDatabaseName("ix_warnings_timer_id_fk");

                    b.HasIndex("UserIdFK")
                        .HasDatabaseName("ix_warnings_user_id_fk");

                    b.ToTable("warnings");

                    b
                        .HasComment("Stores warnings issued to users on servers.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.WarnPunishEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("DateAdded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_added");

                    b.Property<decimal>("GuildIdFK")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("guild_id_fk");

                    b.Property<TimeSpan?>("Interval")
                        .HasColumnType("interval")
                        .HasColumnName("interval");

                    b.Property<decimal?>("PunishRoleId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("punish_role_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<int>("WarnAmount")
                        .HasColumnType("integer")
                        .HasColumnName("warn_amount");

                    b.HasKey("Id")
                        .HasName("pk_warn_punishments");

                    b.HasIndex("GuildIdFK")
                        .HasDatabaseName("ix_warn_punishments_guild_id_fk");

                    b.ToTable("warn_punishments");

                    b
                        .HasComment("Stores punishments to be automatically applied once a user reaches a certain amount of warnings.");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.AliasEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("AliasRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_aliases_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.AutoCommandEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.TimerEntity", "TimerRel")
                        .WithOne()
                        .HasForeignKey("AkkoCore.Services.Database.Entities.AutoCommandEntity", "TimerIdFK")
                        .HasConstraintName("fk_auto_commands_timers_timer_rel_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TimerRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.AutoSlowmodeEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithOne("AutoSlowmodeRel")
                        .HasForeignKey("AkkoCore.Services.Database.Entities.AutoSlowmodeEntity", "GuildIdFK")
                        .HasConstraintName("fk_auto_slowmode_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.CommandCooldownEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("CommandCooldownRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_command_cooldown_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.FilteredContentEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("FilteredContentRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_filtered_content_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.FilteredWordsEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithOne("FilteredWordsRel")
                        .HasForeignKey("AkkoCore.Services.Database.Entities.FilteredWordsEntity", "GuildIdFK")
                        .HasConstraintName("fk_filtered_words_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.GatekeepEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithOne("GatekeepRel")
                        .HasForeignKey("AkkoCore.Services.Database.Entities.GatekeepEntity", "GuildIdFK")
                        .HasConstraintName("fk_gatekeeping_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.GuildLogEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("GuildLogsRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_guild_logs_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.MutedUserEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("MutedUserRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_muted_users_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.OccurrenceEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("OccurrenceRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_occurrences_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.PermissionOverrideEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("PermissionOverrideRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_permission_override_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.PollEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("PollRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_polls_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.ReminderEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.TimerEntity", "TimerRel")
                        .WithOne()
                        .HasForeignKey("AkkoCore.Services.Database.Entities.ReminderEntity", "TimerIdFK")
                        .HasConstraintName("fk_reminders_timers_timer_rel_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimerRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.RepeaterEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("RepeaterRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_repeaters_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkkoCore.Services.Database.Entities.TimerEntity", "TimerRel")
                        .WithOne()
                        .HasForeignKey("AkkoCore.Services.Database.Entities.RepeaterEntity", "TimerIdFK")
                        .HasConstraintName("fk_repeaters_timers_timer_rel_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");

                    b.Navigation("TimerRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.TagEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("TagsRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_tags_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.TimerEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("TimerRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_timers_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AkkoCore.Services.Database.Entities.DiscordUserEntity", "UserRel")
                        .WithMany("TimerRel")
                        .HasForeignKey("UserIdFK")
                        .HasConstraintName("fk_timers_discord_users_user_rel_id")
                        .HasPrincipalKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");

                    b.Navigation("UserRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.VoiceRoleEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("VoiceRolesRel")
                        .HasForeignKey("GuildIdFk")
                        .HasConstraintName("fk_voice_roles_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.WarnEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("WarnRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_warnings_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AkkoCore.Services.Database.Entities.TimerEntity", "TimerRel")
                        .WithOne("WarnRel")
                        .HasForeignKey("AkkoCore.Services.Database.Entities.WarnEntity", "TimerIdFK")
                        .HasConstraintName("fk_warnings_timers_timer_id_fk")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AkkoCore.Services.Database.Entities.DiscordUserEntity", "UserRel")
                        .WithMany("WarnRel")
                        .HasForeignKey("UserIdFK")
                        .HasConstraintName("fk_warnings_discord_users_user_rel_id")
                        .HasPrincipalKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");

                    b.Navigation("TimerRel");

                    b.Navigation("UserRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.WarnPunishEntity", b =>
                {
                    b.HasOne("AkkoCore.Services.Database.Entities.GuildConfigEntity", "GuildConfigRel")
                        .WithMany("WarnPunishRel")
                        .HasForeignKey("GuildIdFK")
                        .HasConstraintName("fk_warn_punishments_guild_config_guild_config_rel_id")
                        .HasPrincipalKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildConfigRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.DiscordUserEntity", b =>
                {
                    b.Navigation("TimerRel");

                    b.Navigation("WarnRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.GuildConfigEntity", b =>
                {
                    b.Navigation("AliasRel");

                    b.Navigation("AutoSlowmodeRel");

                    b.Navigation("CommandCooldownRel");

                    b.Navigation("FilteredContentRel");

                    b.Navigation("FilteredWordsRel");

                    b.Navigation("GatekeepRel");

                    b.Navigation("GuildLogsRel");

                    b.Navigation("MutedUserRel");

                    b.Navigation("OccurrenceRel");

                    b.Navigation("PermissionOverrideRel");

                    b.Navigation("PollRel");

                    b.Navigation("RepeaterRel");

                    b.Navigation("TagsRel");

                    b.Navigation("TimerRel");

                    b.Navigation("VoiceRolesRel");

                    b.Navigation("WarnPunishRel");

                    b.Navigation("WarnRel");
                });

            modelBuilder.Entity("AkkoCore.Services.Database.Entities.TimerEntity", b =>
                {
                    b.Navigation("WarnRel");
                });
#pragma warning restore 612, 618
        }
    }
}
